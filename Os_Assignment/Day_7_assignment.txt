
Task 1 ___for file
************************
Que:-
1. Write a script that performs following operations on the given set of files?	(15)															29/09/2021

a) displays the total count of files
b) displays the count of *.pdf files and *.docx
c) rename all *.pdf to *.docx
d) displays the count of *.pdf files and *.docx
e) displays only those files which have underscore '_' in their names

msexchange.qlv
NecessaryComplianceViolations.docx
NewDoc12-23-202016.51.pdf
OpenCases.csv
OPS-94632_new.tar
OS-Windows.pdf
QQL.json
Ransomware.docx
Red_HatReferenceGuide.pdf
ScriptAnalysis.xlsx
Scriptpage.jpg
SolarWinds_Supply-Chain_Attack_UDdashboard.json
Splunk_PC_App.png
Splunk_VM_App.png
Studio_Malware_July_2013.xlsx
TroubleshootingAgentPermissionIssuesforWindows.pdf
UDC_Demo_20210106.xml
Video2020-11-10at7.12.43PM.mp4
VMware-workstation-full-15.5.5-16285975.exe
VMware-workstation-full-16.0.0-16894299.exe
WhatsAppImage2020-11-05at2.47.06PM.jpeg
win.txt 

solution :-
#!/bin/bash
echo "Input your path"
read path

count_total=$(cat $path | wc -l)
echo "total count of files = $count_total"

count_pdf=$(cat $path | grep ".pdf$" | wc -l)
echo "count of *.pdf files = $count_pdf"

count_doc=$(cat $path | grep ".docx$" | wc -l)
echo "count of *.docx files = $count_doc"

var=$(cat $path | grep ".pdf" | awk -F'.' '{print $1}')


sed -i s/.pdf/.docx/g $path


count_pdf_new=$(cat $path | grep ".pdf$" | wc -l)
echo "count of *.pdf files = $count_pdf_new"

count_doc_new=$(cat $path | grep ".docx$" | wc -l)
echo "count of *.docx files = $count_doc_new"

underscore=$(cat $path | grep "_")
echo "$underscore"



task 2
********
2. Write a script that displays the user information on the linux box in the following format:	(10)
Username	Shell assigned to that user


#!/bin/bash

shell=$(echo $SHELL | awk -F'/' '{print $3}')
user=$(whoami)
echo "$user          $shell"

Task 3
************
3. Write a command that fetches the list of all files under /root directory that are more than 2KB in size


find . -type f -size +2000c

task 4
********
4. Create a script that asks for a user name and add that user with password same as that of user name. The user added should be assigned nologin shell


#!/bin/bash

read -p "Enter new user name: " user

adduser -s /usr/sbin/nologin $user

(echo "$user";echo "$user") | passwd $user


Task 5
*******
5. Create a calculator program in bash that takes two numbers (integers) and display menu to the user for various mathematical operations. Hint: Switch Case Break


#!/bin/sh

read -p "Enter first number: " num1
read -p "Enter second Number: " num2
echo " "
echo "Select the operation to perfom and enter the character for it"
echo "For addition enter 'A'"
echo "For subtraction enter 'S'"
echo "For division enter 'D'"
echo "For Multification enter 'M'"
read -p "Enter your operation character: " oper


case "$oper" in
        "A" | "a") echo $(($num1 + $num2))
        ;;
        "S" | "s") echo $(($num1 - $num2))
        ;;
        "M" | "m") echo $(($num1 * $num2))
        ;;
        "D" | "d") echo $(($num1 / $num2))
        ;;

        *) echo "Enter a valid operation"
        exit 1
        ;;

esac


Task 6
**********
6. Create 2 VMs - both CentOS 7 (with fresh snapshots) with names - machineA and machineB
	1. From machineA copy any file to machineB
	solution:-
	scp -r /home/work/filecopy  tyrant@192.168.74.135:/home/tyrant/
	
	
	2. From machineA - create a dir named 'testdir' on machineB
	solution:-
	ssh tyrant@192.168.74.135 "mkdir /home/tyrant/dir"

	

Task 7
**********
7. Create a script that depicts sending the process to background so that the next command in sequence can run without wait


#!/bin/bash
read -p "enter the backgroud  process : "  process_name
read -p "enter foreground process the : " process_name2


$process_name &

echo ""

$process_name2


Task 8
**********
8. Create a script that displays the system information like: OS name, kernel version, RAM, etc.


#!/bin/bash

echo ""
echo "total ram**************************************************"
free | grep "Mem" |awk -F' ' '{print $2}'

echo ""
echo "used ram****************************************************"
free | grep "Mem" |awk -F' ' '{print $3}'

echo ""
echo "free ram*****************************************************"
free | grep "Mem" |awk -F' ' '{print $4}'

echo ""
echo "available*****************************************************"
free | grep "Mem" |awk -F' ' '{print $7}'

echo ""
echo "os name******************************************************"
hostnamectl | grep "Operating System" | awk -F':' '{print $2}'

echo ""
echo "virtulazation*************************************************"
hostnamectl | grep " Virtualization" | awk -F':' '{print $2}'

echo ""
echo "kernel********************************************************"
hostnamectl | grep "Kernel" | awk -F' ' '{print $2}'

echo ""
echo "kernel version************************************************"
hostnamectl | grep "Kernel" | awk -F' ' '{print $3}'

echo ""
echo "shell *****************************************************"
echo $SHELL | awk -F'/' '{print $3}'


Task 9
***********
9. Create a shell script to find the largest among the 3 given numbers


#!/bin/bash
read -p "Enter the first number :" num1
read -p "Enter the second number :" num2
read -p "enter the third number :" num3

if [ $num1 -gt $num2 ] && [ $num1 -gt $num3 ]
        then
                echo " $num1 is greater"
elif [ $num2 -gt $num1 ] && [ $num2 -gt $num3 ]
        then
                echo"$num2 is greater"
else
        echo "$num3 is greater"
fi



Task 10
********************
10. Create a shell program to check whether a given string is palindrome


#!/bin/bash

read -p "Enter the string :" str
echo ""

len=$(echo $str | wc -c)

count=$(expr $len - 1)

mid=$(expr $len / 2)

pos=1

while [ $pos -lt $mid ]
do
        first=$(echo $str | cut -c $pos)
        last=$(echo $str | cut -c $count)

        if [ $first != $last ]
        then
                echo "Not palindrome"
        exit
        fi
pos=$(expr $pos + 1)
count=$(expr $count - 1)

done

echo "string is palindrome"



Task 11
************************
11. Create a shell program to count number of words, characters, white spaces and special symbols in a given text


#!/bin/bash

read -p "Enter the text : " text

#count the total words with wc -w command

word=$(echo "$text" | wc -w)


#count the total characters with wc -m

char=$(echo "$text" | wc -m)

#wc -m always shows +1 cout than actual count so
actual_char=$(expr $char - 1)

#count the total white spaces:-
#count of total characters ($char) - count of charcters without space
wspace_char=$(echo "$text" | sed "s/ //g" | wc -m)

wspace=$(expr $char - $wspace_char)

echo -p "Total words : $word"
echo -p "Total Charecters : $actual_char"
echo -p "Total White space : $wspace"


Task 12
********************
12. Create a script to remove all empty lines from a file


#To remove the blank lines, find the lines with

read -p "Enter the file path : " file

#Find and store lines with words
newfile=$(cat $file | grep .)

#overwrites the new content from newfile to the required file
echo "$newfile" > $file


Task 12
********************
13. Create a script that fetches only the IP address of the machine from output of ifconfig command

#!/bin/bash

ifconfig | head -2 | grep "inet" |awk -F' ' '{print($2)}'

Task 14
****************
14. How to run the c program in bash

a. create a c file nano hello.c
b. write a c program 
eg - #include <stdio.h>

		int main()
		{
		  printf("hello world\n");
		  return 0;
		}

c. give permission to file :- chmod +x /filepath/hello.c

d. compile the file in gcc compiler :-
gcc /filepath/hello.c -o hello

e. run the file :- ./filepath/hello